# -*- coding: utf-8 -*-
"""aoml6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_t__OJCCE5zurhqeKunFU4yCVcla_8S3
"""

import pandas as pd
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

train_data = pd.read_csv('fashion-mnist_train.csv')
test_data = pd.read_csv('fashion-mnist_test.csv')

train_data = train_data.sample(n=5000, random_state=42)

X_train, y_train = train_data.iloc[:, 1:].values, train_data.iloc[:, 0].values
X_test, y_test = test_data.iloc[:, 1:].values, test_data.iloc[:, 0].values

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

linear_svm = SVC(kernel='linear', C=1)
linear_svm.fit(X_train, y_train)
linear_acc = accuracy_score(y_test, linear_svm.predict(X_test))
print(f'Linear SVM Accuracy: {linear_acc:.4f}')

poly_svm = GridSearchCV(SVC(kernel='poly'), {'C': [1, 10], 'degree': [2, 3]}, cv=2, n_jobs=-1)
poly_svm.fit(X_train, y_train)
poly_acc = accuracy_score(y_test, poly_svm.best_estimator_.predict(X_test))
print(f'Polynomial SVM Accuracy: {poly_acc:.4f}')

rbf_svm = GridSearchCV(SVC(kernel='rbf'), {'C': [1, 10], 'gamma': [0.01, 'scale']}, cv=2, n_jobs=-1)
rbf_svm.fit(X_train, y_train)
rbf_acc = accuracy_score(y_test, rbf_svm.best_estimator_.predict(X_test))
print(f'RBF SVM Accuracy: {rbf_acc:.4f}')

train_data = pd.read_csv('fashion-mnist_train.csv')
test_data = pd.read_csv('fashion-mnist_test.csv')

train_data = train_data.sample(n=10000, random_state=42)

X_train, y_train = train_data.iloc[:, 1:].values, train_data.iloc[:, 0].values
X_test, y_test = test_data.iloc[:, 1:].values, test_data.iloc[:, 0].values

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

linear_params = {'C': [0.1, 1, 10, 100]}
linear_svm = GridSearchCV(SVC(kernel='linear'), linear_params, cv=3, scoring='accuracy', n_jobs=-1)
linear_svm.fit(X_train, y_train)
best_linear_C = linear_svm.best_params_['C']
print(f'Best C for linear kernel: {best_linear_C}')

poly_params = {'C': [0.1, 1, 10], 'degree': [2, 3, 4]}
poly_svm = GridSearchCV(SVC(kernel='poly'), poly_params, cv=3, scoring='accuracy', n_jobs=-1)
poly_svm.fit(X_train, y_train)
best_poly_C = poly_svm.best_params_['C']
best_poly_degree = poly_svm.best_params_['degree']
print(f'Best C for polynomial kernel: {best_poly_C}, Best degree: {best_poly_degree}')

rbf_params = {'C': [0.1, 1, 10], 'gamma': ['scale', 'auto', 0.001, 0.01, 0.1]}
rbf_svm = GridSearchCV(SVC(kernel='rbf'), rbf_params, cv=3, scoring='accuracy', n_jobs=-1)
rbf_svm.fit(X_train, y_train)
best_rbf_C = rbf_svm.best_params_['C']
best_rbf_gamma = rbf_svm.best_params_['gamma']
print(f'Best C for RBF kernel: {best_rbf_C}, Best gamma: {best_rbf_gamma}')

best_linear_model = SVC(kernel='linear', C=best_linear_C).fit(X_train, y_train)
best_poly_model = SVC(kernel='poly', C=best_poly_C, degree=best_poly_degree).fit(X_train, y_train)
best_rbf_model = SVC(kernel='rbf', C=best_rbf_C, gamma=best_rbf_gamma).fit(X_train, y_train)

y_pred_linear = best_linear_model.predict(X_test)
y_pred_poly = best_poly_model.predict(X_test)
y_pred_rbf = best_rbf_model.predict(X_test)

print(f'Linear SVM Accuracy: {accuracy_score(y_test, y_pred_linear):.4f}')
print(f'Polynomial SVM Accuracy: {accuracy_score(y_test, y_pred_poly):.4f}')
print(f'RBF SVM Accuracy: {accuracy_score(y_test, y_pred_rbf):.4f}')

